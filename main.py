import logging
from aiogram import Bot, Dispatcher, executor, types
import markups as nav
import config as cfg
import time
from aiogram.dispatcher import filters
from db import Database

logging.basicConfig(level=logging.INFO)

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)
db = Database('database.db')

#–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
    await bot.send_message(message.from_user.id, "<b>–ü—Ä–∏–≤–µ—Ç! üëã \n"
                                                 "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –¥–æ–º–∞—à–∫–æ–π, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π, —Å–æ—á–∏–Ω–µ–Ω–∏—è–º–∏ –∏ —Ç–¥. \n"
                                                 "–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é‚¨áÔ∏è</b>", reply_markup=nav.keyboard_menu,
                           parse_mode="html")
#–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(commands=["sendall"])
async def sendall(message: types.Message):
    if message.from_user.id == 471430149:
        text = message.text[9:]
        users = db.get_users()
        for row in users:
            try:
                await bot.send_message(row[0], text)
                if int(row[1]) != 1:
                    db.set_active(row[0], 1)
            except:
                db.set_active(row[0], 0)
        await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ start
@dp.callback_query_handler(text_contains="menu")
async def subject(call: types.CallbackQuery):
    if call.data == "menu_new_hm":
        await bot.send_message(call.from_user.id, "<b>–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç</b>", reply_markup=nav.keyboard_start_subject,
                               parse_mode="html")
    elif call.data == "menu_essay":
        await bot.send_message(call.from_user.id, "<b>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ—á–∏–Ω–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —Ç–æ—á–∫–æ–π) ‚¨áÔ∏è</b>\n\n"
                                                  "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                                                  "–ö–∞–∫ —è –ø—Ä–æ–≤—ë–ª –ª–µ—Ç–æ.\n"
                                                  "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª—é–±–æ–≤—å.\n"
                                                  "–ò —Ç.–¥.Ô∏è", parse_mode="html")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–∫–ø–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
@dp.callback_query_handler(text_contains="sub")
async def solution(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç –±–æ—Ç.\n–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.</b>",
                           parse_mode="html")

#–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
@dp.message_handler(content_types=["photo"])
async def send_photo(message: types.Message):
    await bot.send_message(message.from_user.id, "<b>–û—Ç–ª–∏—á–Ω–æ!‚úÖ</b>", parse_mode="html")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "<i>–ó–∞–≥—Ä—É–∑–∫–∞...</i>", parse_mode="html")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "<i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</i>", parse_mode="html")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "<i>–ó–∞–≥—Ä—É–∑–∫–∞...</i>", parse_mode="html")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "<b>–£—Å–ø–µ—à–Ω–æ!‚úÖ\n\n"
                                                 "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>", parse_mode="html",
                           reply_markup=nav.keyboard_next)

#–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–º—ã —Å–æ—á–∏–Ω–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–∞–≤—ã—á–∫–∏
@dp.message_handler(filters.Text(endswith="."))
async def essay_topic(message: types.Message):
    await bot.send_message(message.from_user.id, "<b>–û—Ç–ª–∏—á–Ω–æ!‚úÖ</b>", parse_mode="html")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "<i>–ó–∞–≥—Ä—É–∑–∫–∞...</i>", parse_mode="html")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "<i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</i>", parse_mode="html")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "<i>–ó–∞–≥—Ä—É–∑–∫–∞...</i>", parse_mode="html")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "<b>–£—Å–ø–µ—à–Ω–æ!‚úÖ\n\n"
                                                 "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>", parse_mode="html",
                           reply_markup=nav.keyboard_next)

@dp.callback_query_handler(text_contains="next")
async def next_step(message: types.CallbackQuery):
    await bot.send_message(message.from_user.id, "<b>–û—Ç–ª–∏—á–Ω–æ!</b>\n"
                                                 "\n‚õî–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, "
                                                 "—Ç–µ–±–µ <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä—ã,"
                                                 "–±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–º –Ω–∞—à –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ </b>\n"
                                                 "\n1) <a href='https://t.me/+e5KzEG3j9pY2YmQ6'>—Ç–µ–º–∫–∏ –∏ —è–∑—ã–∫–∏</a>"
                                                 "\n2) <a href='https://t.me/+evbJFpEkJOo4ZTky'>–∑–º–µ–∏–Ω–æ–µ –≥–Ω–µ–∑–¥–æ</a>"
                                                 "\n2) <a href='https://t.me/+F0EyQY2B0dVmNjFi'>–ù–æ–≤–æ—Å—Ç–∏</a>"
                                                 "\n3) <a href='https://t.me/+FOMga3D5tNE1ZWY6'>CoinLLions</a>"
                                                 "\n3) <a href='https://t.me/+3EfI5yzkGHpmMmIy'>RTVI</a>"
                                                 "\n4) <a href='https://t.me/+nTSrC509Vro1YWQy'>radio—à–æ—É</a>"
                                                 "\n5) <a href='https://t.me/+tp53aaTyuW5hZTNi'>Aesthetics</a>"
                                                 "\n6) <a href='https://t.me/+esHeIZ0JXfo4OGQy'>–í—ã–∂–∏–º–∞–ª–∫–∞</a>",
                               parse_mode="html", reply_markup=nav.keyboard_check)

def check_sub_channels(chat_member):
    print(chat_member["status"])
    if chat_member["status"] != "left":
        return True
    else:
        return False

@dp.callback_query_handler(text_contains="check")
async def check(message:types.CallbackQuery):
    if check_sub_channels(await bot.get_chat_member(chat_id=cfg.URL_CHAT, user_id=message.from_user.id)):
        await bot.send_message(message.from_user.id, "<b>–£—Å–ø–µ—à–Ω–æ!‚úÖ</b>\n\n"
                                                     "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å –±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –±–æ—Ç. "
                                                     "–í —Ç–µ—á–µ–Ω–∏–µ <b>24-48 —á–∞—Å–æ–≤</b> –ø—Ä–∏–¥–µ—Ç –æ—Ç–≤–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ!ü§ó "
                                                     "<b>–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!</b> "
                                                     "–í–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è <b>–Ω–µ–ª—å–∑—è –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è</b> –æ—Ç –∫–∞–Ω–∞–ª–æ–≤ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, "
                                                     "–∏–Ω–∞—á–µ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.", parse_mode="html")
    else:
        await bot.send_message(message.from_user.id, "<b>‚Äº–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã</b>", parse_mode="html")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates = True)