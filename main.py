import logging
from aiogram import Bot, Dispatcher, executor, types
import markups as nav
import config as cfg
import time
from aiogram.dispatcher import filters

logging.basicConfig(level=logging.INFO)

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)

#–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, "<b>–ü—Ä–∏–≤–µ—Ç! üëã \n"
                                                 "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –¥–æ–º–∞—à–∫–æ–π, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π, —Å–æ—á–∏–Ω–µ–Ω–∏—è–º–∏ –∏ —Ç–¥. \n"
                                                 "–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é‚¨áÔ∏è</b>", reply_markup=nav.keyboard_menu,
                           parse_mode="html")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ start
@dp.callback_query_handler(text_contains="menu")
async def subject(call: types.CallbackQuery):
    if call.data == "menu_new_hm":
        await bot.send_message(call.from_user.id, "<b>–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç</b>", reply_markup=nav.keyboard_start_subject,
                               parse_mode="html")
    elif call.data == "menu_essay":
        await bot.send_message(call.from_user.id, "<b>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ—á–∏–Ω–µ–Ω–∏—è‚¨áÔ∏è</b>", parse_mode="html")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–∫–ø–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
@dp.callback_query_handler(text_contains="sub")
async def solution(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç –±–æ—Ç.\n–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.</b>",
                           parse_mode="html")

#–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
@dp.message_handler(content_types=["photo"])
async def send_photo(message: types.Message):
    await bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ!‚úÖ")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞...")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞...")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "<b>–£—Å–ø–µ—à–Ω–æ!‚úÖ  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b", parse_mode="html",
                           reply_markup=nav.keyboard_next)

#–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–º—ã —Å–æ—á–∏–Ω–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–∞–≤—ã—á–∫–∏
@dp.message_handler(filters.Text(startswith="\""))
async def essay_topic(message: types.Message):
    await bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ!‚úÖ")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞...")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞...")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "<b>–£—Å–ø–µ—à–Ω–æ!‚úÖ  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>", parse_mode="html",
                           reply_markup=nav.keyboard_next)

@dp.callback_query_handler(text_contains="next")
async def next_step(message: types.CallbackQuery):
    await bot.send_message(message.from_user.id, "<b>–û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!</b>"
                                              "\n1) <a href='https://t.me/estetts'>–ú–æ–π –∫–∞–Ω–∞–ª</a>",
                               parse_mode="html", reply_markup=nav.keyboard_check)

def check_sub_channels(chat_member):
    print(chat_member["status"])
    if chat_member["status"] != "left":
        return True
    else:
        return False

@dp.callback_query_handler(text_contains="check")
async def check(message:types.CallbackQuery):
    if check_sub_channels(await bot.get_chat_member(chat_id=cfg.URL_CHAT, user_id=message.from_user.id)):
        await bot.send_message(message.from_user.id, "GOOD")
    else:
        await bot.send_message(message.from_user.id, "–ù–µ —Ö–∞—Ä–æ—â—å")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates = True)