import logging
from aiogram import Bot, Dispatcher, executor, types
import markups as nav
import config as cfg
import time

logging.basicConfig(level=logging.INFO)

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, "<b>–ü—Ä–∏–≤–µ—Ç! üëã \n"
                                                 "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –¥–æ–º–∞—à–∫–æ–π, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π, —Å–æ—á–∏–Ω–µ–Ω–∏—è–º–∏ –∏ —Ç–¥. \n"
                                                 "–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é‚¨áÔ∏è</b>", reply_markup=nav.keyboard_menu,
                           parse_mode="html")

@dp.callback_query_handler(text_contains="menu")
async def subject(call: types.CallbackQuery):
    if call.data == "menu_new_hm":
        await bot.send_message(call.from_user.id, "<b>–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç</b>", reply_markup=nav.keyboard_start_subject,
                               parse_mode="html")
    elif call.data == "menu_essay":
        await bot.send_message(call.from_user.id, "<b>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ—á–∏–Ω–µ–Ω–∏—è\n–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>‚¨áÔ∏è",
                               parse_mode="html",
                               reply_markup=nav.keyboard_send)

@dp.callback_query_handler(text_contains="sub")
async def solution(call: types.CallbackQuery):
    if call.data == "sub_send":
        await bot.send_message(call.from_user.id, "–û—Ç–ª–∏—á–Ω–æ!‚úÖ")
        time.sleep(3)
        await bot.send_message(call.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞...")
        time.sleep(3)
        await bot.send_message(call.from_user.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        time.sleep(3)
        await bot.send_message(call.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞...")
        time.sleep(3)
        await bot.send_message(call.from_user.id, "–£—Å–ø–µ—à–Ω–æ!‚úÖ  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")
    else:
        await bot.send_message(call.from_user.id, "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç –±–æ—Ç.\n–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.</b>",
                           parse_mode="html")

@dp.message_handler(content_types=["photo"])
async def send_photo(message: types.Message):
    await bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ!‚úÖ")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞...")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞...")
    time.sleep(3)
    await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ!‚úÖ  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates = True)